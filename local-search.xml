<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/11/09/hello-world/"/>
    <url>/2021/11/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Sass中&amp;连体符的使用</title>
    <link href="/2021/10/06/Sass%E4%B8%AD&amp;%E8%BF%9E%E4%BD%93%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/10/06/Sass%E4%B8%AD&amp;%E8%BF%9E%E4%BD%93%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>对于多种选择器来说，如何使用连体符，例子如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> &#123;clolor: <span class="hljs-number">#ff3366</span>; &#125; <br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">color</span>: <span class="hljs-number">#cc0033</span>; &#125; <br><span class="hljs-selector-class">.nav-menu</span> <span class="hljs-selector-tag">a</span> &#123;<span class="hljs-attribute">color</span>: <span class="hljs-number">#ff668c</span>; &#125; <br><span class="hljs-selector-class">.nav-menu</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">color</span>: <span class="hljs-number">#ff99b3</span>; &#125; <br><span class="hljs-selector-class">.nav-menu</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.active</span> &#123;<span class="hljs-attribute">color</span>: <span class="hljs-number">#ff0040</span>; &#125; <br><span class="hljs-selector-class">.footer-menu</span> <span class="hljs-selector-tag">a</span> &#123;<span class="hljs-attribute">color</span>: <span class="hljs-number">#ff1a53</span>; &#125; <br><span class="hljs-selector-class">.footer-menu</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">color</span>: <span class="hljs-number">#cc0033</span>; &#125;<br></code></pre></td></tr></table></figure><p>使用连体符后：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mel">$color: #<span class="hljs-number">444</span>;<br>$bg-<span class="hljs-keyword">color</span>: #f5f5f5;<br>$link-<span class="hljs-keyword">color</span>: #f36;<br>a &#123;<br>    clolor: $link-<span class="hljs-keyword">color</span>;<br>    &amp;:hover &#123;<br>        <span class="hljs-keyword">color</span>: darken($link-<span class="hljs-keyword">color</span>, <span class="hljs-number">20</span>%);<br>    &#125;<br>    .nav-<span class="hljs-keyword">menu</span> &amp; &#123;<br>        <span class="hljs-keyword">color</span>: lighten($link-<span class="hljs-keyword">color</span>, <span class="hljs-number">10</span>%);<br>        &amp;:hover &#123;<br>            <span class="hljs-keyword">color</span>: lighten($link-<span class="hljs-keyword">color</span>, <span class="hljs-number">20</span>%);<br>        &#125;<br>        &amp;.active &#123;<br>            <span class="hljs-keyword">color</span>: darken($link-<span class="hljs-keyword">color</span>, <span class="hljs-number">10</span>%);<br>        &#125;<br>    &#125;<br>    .footer-<span class="hljs-keyword">menu</span> &amp; &#123;<br>        <span class="hljs-keyword">color</span>: darken($link-<span class="hljs-keyword">color</span>, <span class="hljs-number">5</span>%);<br>        &amp;:hover &#123;<br>            <span class="hljs-keyword">color</span>: darken($link-<span class="hljs-keyword">color</span>, <span class="hljs-number">20</span>%);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Sass</tag>
      
    </tags>
    
  </entry>
  
  
  

  <entry>
    <title>JS数组常用API方法</title>
    <link href="/2021/10/05/JS%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8API%E6%96%B9%E6%B3%95/"/>
    <url>/2021/10/05/JS%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8API%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h4 id="数组-concat-：合并数组"><a href="#数组-concat-：合并数组" class="headerlink" title="数组.concat()：合并数组"></a>数组.concat()：合并数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br><span class="hljs-keyword">let</span> arr = arr1.concat(arr2) <br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// [1, 2, 3, 4, 5, 6]</span><br></code></pre></td></tr></table></figure><h4 id="数组-indexOf-：查找数组中的元素找到返回索引值，找不到返回-1"><a href="#数组-indexOf-：查找数组中的元素找到返回索引值，找不到返回-1" class="headerlink" title="数组.indexOf()：查找数组中的元素找到返回索引值，找不到返回 -1"></a>数组.indexOf()：查找数组中的元素找到返回索引值，找不到返回 -1</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr = arr1.indexOf(<span class="hljs-number">1</span>) <br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><h4 id="数组-join-：拼接数组"><a href="#数组-join-：拼接数组" class="headerlink" title="数组.join()：拼接数组"></a>数组.join()：拼接数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr = arr1.join(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// &#x27;123&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="数组-sort-：数组排序"><a href="#数组-sort-：数组排序" class="headerlink" title="数组.sort()：数组排序"></a>数组.sort()：数组排序</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">25</span>, <span class="hljs-number">48</span>, <span class="hljs-number">2</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>]<br><br><span class="hljs-comment">// sort方法在进行排序的时候遇到两位数字只能根据第一个数字大小排序，因此可以传一个回调进行排序</span><br><span class="hljs-keyword">let</span> arr = arr1.sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) </span>&#123; <span class="hljs-keyword">return</span> a - b &#125;) <span class="hljs-comment">// 从小到大 [1, 2, 3, 25, 45, 48, 98]</span><br>arr1.sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) </span>&#123; <span class="hljs-keyword">return</span> b - a &#125;) <span class="hljs-comment">// 从大到小 [98, 48, 45, 25, 3, 2, 1]</span><br><br><span class="hljs-comment">// let arr = arr1.sort()</span><br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// [1, 2, 25, 3, 45, 48, 98]</span><br><br></code></pre></td></tr></table></figure><h4 id="Array-isArray-：判断是不是数组"><a href="#Array-isArray-：判断是不是数组" class="headerlink" title="Array.isArray()：判断是不是数组"></a>Array.isArray()：判断是不是数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">25</span>, <span class="hljs-number">48</span>, <span class="hljs-number">2</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> obj = &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">22</span> &#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.isArray(arr1)) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.isArray(obj)) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h4 id="Array-from-：数组假转真"><a href="#Array-from-：数组假转真" class="headerlink" title="Array.from()：数组假转真"></a>Array.from()：数组假转真</h4><h4 id="数组-forEach-：遍历数组"><a href="#数组-forEach-：遍历数组" class="headerlink" title="数组.forEach()：遍历数组"></a>数组.forEach()：遍历数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">25</span>, <span class="hljs-number">48</span>, <span class="hljs-number">2</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>]<br>arr1.forEach(<span class="hljs-function">(<span class="hljs-params">item, index, arr</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// item: 数组里的每一项</span><br>    <span class="hljs-comment">// index: 数组里的每一项的索引值</span><br>    <span class="hljs-comment">// obj: 数组本身</span><br>    <span class="hljs-built_in">console</span>.log(item) <span class="hljs-comment">// 1  45  25  48  2  98  3</span><br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="数组-find-：遍历数组-返回数组中首次出现的满足条件的元素"><a href="#数组-find-：遍历数组-返回数组中首次出现的满足条件的元素" class="headerlink" title="数组.find()：遍历数组(返回数组中首次出现的满足条件的元素)"></a>数组.find()：遍历数组(返回数组中首次出现的满足条件的元素)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">25</span>, <span class="hljs-number">48</span>, <span class="hljs-number">2</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr2 = arr1.find(<span class="hljs-function">(<span class="hljs-params">item, index, arr</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// item: 数组里的每一项</span><br>    <span class="hljs-comment">// index: 数组里的每一项的索引值</span><br>    <span class="hljs-comment">// obj: 数组本身</span><br>    <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">5</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr2) <span class="hljs-comment">// 45</span><br></code></pre></td></tr></table></figure><h4 id="数组-findIndex-：遍历数组-返回数组中首次出现的满足条件的元素的索引值，找不到返回-1"><a href="#数组-findIndex-：遍历数组-返回数组中首次出现的满足条件的元素的索引值，找不到返回-1" class="headerlink" title="数组.findIndex()：遍历数组(返回数组中首次出现的满足条件的元素的索引值，找不到返回 -1)"></a>数组.findIndex()：遍历数组(返回数组中首次出现的满足条件的元素的索引值，找不到返回 -1)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">25</span>, <span class="hljs-number">48</span>, <span class="hljs-number">2</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr2 = arr1.findIndex(<span class="hljs-function">(<span class="hljs-params">item, index, arr</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// item: 数组里的每一项</span><br>    <span class="hljs-comment">// index: 数组里的每一项的索引值</span><br>    <span class="hljs-comment">// obj: 数组本身</span><br>    <span class="hljs-keyword">return</span> item&gt;<span class="hljs-number">5</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr2) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h4 id="数组-some-：遍历数组-查找数组中满足条件的元素有一个满足就为true，立即终止循环"><a href="#数组-some-：遍历数组-查找数组中满足条件的元素有一个满足就为true，立即终止循环" class="headerlink" title="数组.some()：遍历数组(查找数组中满足条件的元素有一个满足就为true，立即终止循环)"></a>数组.some()：遍历数组(查找数组中满足条件的元素有一个满足就为true，立即终止循环)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">25</span>, <span class="hljs-number">48</span>, <span class="hljs-number">2</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr2 = arr1.some(<span class="hljs-function">(<span class="hljs-params">item, index, arr</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// item: 数组里的每一项</span><br>    <span class="hljs-comment">// index: 数组里的每一项的索引值</span><br>    <span class="hljs-comment">// obj: 数组本身</span><br>    <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">5</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr2) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="数组-every-：遍历数组-查找数组中满足条件的元素-都满足就为true"><a href="#数组-every-：遍历数组-查找数组中满足条件的元素-都满足就为true" class="headerlink" title="数组.every()：遍历数组(查找数组中满足条件的元素, 都满足就为true)"></a>数组.every()：遍历数组(查找数组中满足条件的元素, 都满足就为true)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">25</span>, <span class="hljs-number">48</span>, <span class="hljs-number">2</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr2 = arr1.every(<span class="hljs-function">(<span class="hljs-params">item, index, arr</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// item: 数组里的每一项</span><br>    <span class="hljs-comment">// index: 数组里的每一项的索引值</span><br>    <span class="hljs-comment">// obj: 数组本身</span><br>    <span class="hljs-keyword">return</span> item &gt;= <span class="hljs-number">1</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr2) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="数组-filter-：遍历数组-过滤数组单元值，生成新数组返回"><a href="#数组-filter-：遍历数组-过滤数组单元值，生成新数组返回" class="headerlink" title="数组.filter()：遍历数组(过滤数组单元值，生成新数组返回)"></a>数组.filter()：遍历数组(过滤数组单元值，生成新数组返回)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">25</span>, <span class="hljs-number">48</span>, <span class="hljs-number">2</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr2 = arr1.filter(<span class="hljs-function">(<span class="hljs-params">item, index, arr</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// item: 数组里的每一项</span><br>    <span class="hljs-comment">// index: 数组里的每一项的索引值</span><br>    <span class="hljs-comment">// obj: 数组本身</span><br>    <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">5</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr2) <span class="hljs-comment">// [45, 25, 48, 98]</span><br></code></pre></td></tr></table></figure><h4 id="数组-map-：遍历数组-迭代原数组，生成新数组"><a href="#数组-map-：遍历数组-迭代原数组，生成新数组" class="headerlink" title="数组.map()：遍历数组(迭代原数组，生成新数组)"></a>数组.map()：遍历数组(迭代原数组，生成新数组)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">25</span>, <span class="hljs-number">48</span>, <span class="hljs-number">2</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr2 = arr1.map(<span class="hljs-function">(<span class="hljs-params">item, index, arr</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// item: 数组里的每一项</span><br>    <span class="hljs-comment">// index: 数组里的每一项的索引值</span><br>    <span class="hljs-comment">// obj: 数组本身</span><br>    <span class="hljs-keyword">return</span> item * <span class="hljs-number">5</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr2) <span class="hljs-comment">// [5, 225, 125, 240, 10, 490, 15]</span><br></code></pre></td></tr></table></figure><h4 id="数组-reduce-：遍历数组-累加"><a href="#数组-reduce-：遍历数组-累加" class="headerlink" title="数组.reduce()：遍历数组(累加)"></a>数组.reduce()：遍历数组(累加)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">25</span>, <span class="hljs-number">48</span>, <span class="hljs-number">2</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr2 = arr1.reduce(<span class="hljs-function">(<span class="hljs-params">sum, item</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// sum: 数组中元素的和</span><br>    <span class="hljs-comment">// item: 数组里的每一项</span><br>    sum += item<br>    <span class="hljs-keyword">return</span> sum<br>&#125;, <span class="hljs-number">0</span>)<br><span class="hljs-built_in">console</span>.log(arr2) <span class="hljs-comment">// 222</span><br></code></pre></td></tr></table></figure><h4 id="数组-includes-：查找数组中的元素找到返回-true-找不到返回-false"><a href="#数组-includes-：查找数组中的元素找到返回-true-找不到返回-false" class="headerlink" title="数组.includes()：查找数组中的元素找到返回 true 找不到返回 false"></a>数组.includes()：查找数组中的元素找到返回 true 找不到返回 false</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">25</span>, <span class="hljs-number">48</span>, <span class="hljs-number">2</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr = arr1.includes(<span class="hljs-number">45</span>)<br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="数组-push-：在数组最后面添加元素"><a href="#数组-push-：在数组最后面添加元素" class="headerlink" title="数组.push()：在数组最后面添加元素"></a>数组.push()：在数组最后面添加元素</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>]<br>arr.push(<span class="hljs-string">&#x27;王五&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// [&quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;]</span><br></code></pre></td></tr></table></figure><h4 id="数组-unshift-：在数组头部添加元素"><a href="#数组-unshift-：在数组头部添加元素" class="headerlink" title="数组.unshift()：在数组头部添加元素"></a>数组.unshift()：在数组头部添加元素</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>]<br>arr.unshift(<span class="hljs-string">&#x27;王五&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// [&quot;王五&quot;, &quot;张三&quot;, &quot;李四&quot;]</span><br></code></pre></td></tr></table></figure><h4 id="数组-pop-：删除数组中最后一个元素"><a href="#数组-pop-：删除数组中最后一个元素" class="headerlink" title="数组.pop()：删除数组中最后一个元素"></a>数组.pop()：删除数组中最后一个元素</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;王五&quot;</span>]<br>arr.pop(<span class="hljs-string">&#x27;王五&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// [&quot;张三&quot;, &quot;李四&quot;]</span><br></code></pre></td></tr></table></figure><h4 id="数组-shift-：删除数组头部第一个元素"><a href="#数组-shift-：删除数组头部第一个元素" class="headerlink" title="数组.shift()：删除数组头部第一个元素"></a>数组.shift()：删除数组头部第一个元素</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;王五&quot;</span>]<br>arr.shift(<span class="hljs-string">&#x27;王五&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// [&quot;李四&quot;, &quot;王五&quot;]</span><br></code></pre></td></tr></table></figure><h4 id="数组-splice-：动态删除添加元素"><a href="#数组-splice-：动态删除添加元素" class="headerlink" title="数组.splice()：动态删除添加元素"></a>数组.splice()：动态删除添加元素</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;王五&quot;</span>]<br>arr.splice(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;王五&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// [&quot;王五&quot;, &quot;李四&quot;, &quot;王五&quot;]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>

  
  
  
  <entry>
    <title>Git常见错误解决方法</title>
    <link href="/2021/09/25/Git%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2021/09/25/Git%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="1-failed-to-receive-handshake-ssl-tls-connection-failed-github-【已解决】"><a href="#1-failed-to-receive-handshake-ssl-tls-connection-failed-github-【已解决】" class="headerlink" title="1.failed to receive handshake ssl/tls connection failed github    【已解决】"></a>1.failed to receive handshake ssl/tls connection failed github    【已解决】</h3><pre><code>在使用github客户端提交代码时，报错`failed to receive handshake ssl/tls connection failed`解决方法：$ git config --global http.sslBackend &quot;openssl&quot;</code></pre><h3 id="2-在第一次使用git传到远程仓库是报错error-failed-to-push-some-refs-to-‘github-com-xxx-git’-【已解决】"><a href="#2-在第一次使用git传到远程仓库是报错error-failed-to-push-some-refs-to-‘github-com-xxx-git’-【已解决】" class="headerlink" title="2.在第一次使用git传到远程仓库是报错error: failed to push some refs to ‘github.com/xxx.git’    【已解决】"></a>2.在第一次使用git传到远程仓库是报错error: failed to push some refs to ‘github.com/xxx.git’    【已解决】</h3><p>​    经过查资料发现是因为我们在本地新建库后，与远程仓库的内容不一致导致的。为此在我向远程库推送的时候，要先进行pull，让本地新建的库和远程库进行同步。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">正确步骤：<br><span class="hljs-number">1</span>. git init <span class="hljs-regexp">//</span>初始化仓库<br><span class="hljs-number">2</span>. git add .(文件name) <span class="hljs-regexp">//</span>添加文件到本地仓库<br><span class="hljs-number">3</span>. git commit -m “first commit” <span class="hljs-regexp">//</span>添加文件描述信息<br><span class="hljs-number">4</span>. git remote add origin + 远程仓库地址 <span class="hljs-regexp">//</span>链接远程仓库，创建主分支<br><span class="hljs-number">5</span>. git pull origin master <span class="hljs-regexp">//</span> 把本地仓库的变化连接到远程仓库主分支<br><span class="hljs-number">6</span>. git push -u origin master <span class="hljs-regexp">//</span>把本地仓库的文件推送到远程仓库<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  

  
</search>
