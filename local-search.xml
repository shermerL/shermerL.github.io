<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LeetCode上的那些计数排序</title>
    <link href="/2021/11/14/LeetCode%E4%B8%8A%E7%9A%84%E9%82%A3%E4%BA%9B%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    <url>/2021/11/14/LeetCode%E4%B8%8A%E7%9A%84%E9%82%A3%E4%BA%9B%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p>  偶然时间在力扣上看到一道</p><p>的题</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github.io绑定域名全流程</title>
    <link href="/2021/11/13/Github-io%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E5%85%A8%E6%B5%81%E7%A8%8B/"/>
    <url>/2021/11/13/Github-io%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E5%85%A8%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>待更新</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>域名</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sass中&amp;连体符的使用</title>
    <link href="/2021/10/06/Sass%E4%B8%AD&amp;%E8%BF%9E%E4%BD%93%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/10/06/Sass%E4%B8%AD&amp;%E8%BF%9E%E4%BD%93%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>对于多种选择器来说，如何使用连体符，例子如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> &#123;clolor: <span class="hljs-number">#ff3366</span>; &#125; <br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">color</span>: <span class="hljs-number">#cc0033</span>; &#125; <br><span class="hljs-selector-class">.nav-menu</span> <span class="hljs-selector-tag">a</span> &#123;<span class="hljs-attribute">color</span>: <span class="hljs-number">#ff668c</span>; &#125; <br><span class="hljs-selector-class">.nav-menu</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">color</span>: <span class="hljs-number">#ff99b3</span>; &#125; <br><span class="hljs-selector-class">.nav-menu</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.active</span> &#123;<span class="hljs-attribute">color</span>: <span class="hljs-number">#ff0040</span>; &#125; <br><span class="hljs-selector-class">.footer-menu</span> <span class="hljs-selector-tag">a</span> &#123;<span class="hljs-attribute">color</span>: <span class="hljs-number">#ff1a53</span>; &#125; <br><span class="hljs-selector-class">.footer-menu</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">color</span>: <span class="hljs-number">#cc0033</span>; &#125;<br></code></pre></td></tr></table></figure><p>使用连体符后：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mel">$color: #<span class="hljs-number">444</span>;<br>$bg-<span class="hljs-keyword">color</span>: #f5f5f5;<br>$link-<span class="hljs-keyword">color</span>: #f36;<br>a &#123;<br>    clolor: $link-<span class="hljs-keyword">color</span>;<br>    &amp;:hover &#123;<br>        <span class="hljs-keyword">color</span>: darken($link-<span class="hljs-keyword">color</span>, <span class="hljs-number">20</span>%);<br>    &#125;<br>    .nav-<span class="hljs-keyword">menu</span> &amp; &#123;<br>        <span class="hljs-keyword">color</span>: lighten($link-<span class="hljs-keyword">color</span>, <span class="hljs-number">10</span>%);<br>        &amp;:hover &#123;<br>            <span class="hljs-keyword">color</span>: lighten($link-<span class="hljs-keyword">color</span>, <span class="hljs-number">20</span>%);<br>        &#125;<br>        &amp;.active &#123;<br>            <span class="hljs-keyword">color</span>: darken($link-<span class="hljs-keyword">color</span>, <span class="hljs-number">10</span>%);<br>        &#125;<br>    &#125;<br>    .footer-<span class="hljs-keyword">menu</span> &amp; &#123;<br>        <span class="hljs-keyword">color</span>: darken($link-<span class="hljs-keyword">color</span>, <span class="hljs-number">5</span>%);<br>        &amp;:hover &#123;<br>            <span class="hljs-keyword">color</span>: darken($link-<span class="hljs-keyword">color</span>, <span class="hljs-number">20</span>%);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Sass</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS数组常用API方法</title>
    <link href="/2021/10/05/JS%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8API%E6%96%B9%E6%B3%95/"/>
    <url>/2021/10/05/JS%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8API%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h4 id="数组-concat-：合并数组"><a href="#数组-concat-：合并数组" class="headerlink" title="数组.concat()：合并数组"></a>数组.concat()：合并数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br><span class="hljs-keyword">let</span> arr = arr1.concat(arr2) <br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// [1, 2, 3, 4, 5, 6]</span><br></code></pre></td></tr></table></figure><h4 id="数组-indexOf-：查找数组中的元素找到返回索引值，找不到返回-1"><a href="#数组-indexOf-：查找数组中的元素找到返回索引值，找不到返回-1" class="headerlink" title="数组.indexOf()：查找数组中的元素找到返回索引值，找不到返回 -1"></a>数组.indexOf()：查找数组中的元素找到返回索引值，找不到返回 -1</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr = arr1.indexOf(<span class="hljs-number">1</span>) <br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><h4 id="数组-join-：拼接数组"><a href="#数组-join-：拼接数组" class="headerlink" title="数组.join()：拼接数组"></a>数组.join()：拼接数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr = arr1.join(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// &#x27;123&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="数组-sort-：数组排序"><a href="#数组-sort-：数组排序" class="headerlink" title="数组.sort()：数组排序"></a>数组.sort()：数组排序</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">25</span>, <span class="hljs-number">48</span>, <span class="hljs-number">2</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>]<br><br><span class="hljs-comment">// sort方法在进行排序的时候遇到两位数字只能根据第一个数字大小排序，因此可以传一个回调进行排序</span><br><span class="hljs-keyword">let</span> arr = arr1.sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) </span>&#123; <span class="hljs-keyword">return</span> a - b &#125;) <span class="hljs-comment">// 从小到大 [1, 2, 3, 25, 45, 48, 98]</span><br>arr1.sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) </span>&#123; <span class="hljs-keyword">return</span> b - a &#125;) <span class="hljs-comment">// 从大到小 [98, 48, 45, 25, 3, 2, 1]</span><br><br><span class="hljs-comment">// let arr = arr1.sort()</span><br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// [1, 2, 25, 3, 45, 48, 98]</span><br><br></code></pre></td></tr></table></figure><h4 id="Array-isArray-：判断是不是数组"><a href="#Array-isArray-：判断是不是数组" class="headerlink" title="Array.isArray()：判断是不是数组"></a>Array.isArray()：判断是不是数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">25</span>, <span class="hljs-number">48</span>, <span class="hljs-number">2</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> obj = &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">22</span> &#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.isArray(arr1)) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.isArray(obj)) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h4 id="Array-from-：数组假转真"><a href="#Array-from-：数组假转真" class="headerlink" title="Array.from()：数组假转真"></a>Array.from()：数组假转真</h4><h4 id="数组-forEach-：遍历数组"><a href="#数组-forEach-：遍历数组" class="headerlink" title="数组.forEach()：遍历数组"></a>数组.forEach()：遍历数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">25</span>, <span class="hljs-number">48</span>, <span class="hljs-number">2</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>]<br>arr1.forEach(<span class="hljs-function">(<span class="hljs-params">item, index, arr</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// item: 数组里的每一项</span><br>    <span class="hljs-comment">// index: 数组里的每一项的索引值</span><br>    <span class="hljs-comment">// obj: 数组本身</span><br>    <span class="hljs-built_in">console</span>.log(item) <span class="hljs-comment">// 1  45  25  48  2  98  3</span><br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="数组-find-：遍历数组-返回数组中首次出现的满足条件的元素"><a href="#数组-find-：遍历数组-返回数组中首次出现的满足条件的元素" class="headerlink" title="数组.find()：遍历数组(返回数组中首次出现的满足条件的元素)"></a>数组.find()：遍历数组(返回数组中首次出现的满足条件的元素)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">25</span>, <span class="hljs-number">48</span>, <span class="hljs-number">2</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr2 = arr1.find(<span class="hljs-function">(<span class="hljs-params">item, index, arr</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// item: 数组里的每一项</span><br>    <span class="hljs-comment">// index: 数组里的每一项的索引值</span><br>    <span class="hljs-comment">// obj: 数组本身</span><br>    <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">5</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr2) <span class="hljs-comment">// 45</span><br></code></pre></td></tr></table></figure><h4 id="数组-findIndex-：遍历数组-返回数组中首次出现的满足条件的元素的索引值，找不到返回-1"><a href="#数组-findIndex-：遍历数组-返回数组中首次出现的满足条件的元素的索引值，找不到返回-1" class="headerlink" title="数组.findIndex()：遍历数组(返回数组中首次出现的满足条件的元素的索引值，找不到返回 -1)"></a>数组.findIndex()：遍历数组(返回数组中首次出现的满足条件的元素的索引值，找不到返回 -1)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">25</span>, <span class="hljs-number">48</span>, <span class="hljs-number">2</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr2 = arr1.findIndex(<span class="hljs-function">(<span class="hljs-params">item, index, arr</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// item: 数组里的每一项</span><br>    <span class="hljs-comment">// index: 数组里的每一项的索引值</span><br>    <span class="hljs-comment">// obj: 数组本身</span><br>    <span class="hljs-keyword">return</span> item&gt;<span class="hljs-number">5</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr2) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h4 id="数组-some-：遍历数组-查找数组中满足条件的元素有一个满足就为true，立即终止循环"><a href="#数组-some-：遍历数组-查找数组中满足条件的元素有一个满足就为true，立即终止循环" class="headerlink" title="数组.some()：遍历数组(查找数组中满足条件的元素有一个满足就为true，立即终止循环)"></a>数组.some()：遍历数组(查找数组中满足条件的元素有一个满足就为true，立即终止循环)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">25</span>, <span class="hljs-number">48</span>, <span class="hljs-number">2</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr2 = arr1.some(<span class="hljs-function">(<span class="hljs-params">item, index, arr</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// item: 数组里的每一项</span><br>    <span class="hljs-comment">// index: 数组里的每一项的索引值</span><br>    <span class="hljs-comment">// obj: 数组本身</span><br>    <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">5</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr2) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="数组-every-：遍历数组-查找数组中满足条件的元素-都满足就为true"><a href="#数组-every-：遍历数组-查找数组中满足条件的元素-都满足就为true" class="headerlink" title="数组.every()：遍历数组(查找数组中满足条件的元素, 都满足就为true)"></a>数组.every()：遍历数组(查找数组中满足条件的元素, 都满足就为true)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">25</span>, <span class="hljs-number">48</span>, <span class="hljs-number">2</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr2 = arr1.every(<span class="hljs-function">(<span class="hljs-params">item, index, arr</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// item: 数组里的每一项</span><br>    <span class="hljs-comment">// index: 数组里的每一项的索引值</span><br>    <span class="hljs-comment">// obj: 数组本身</span><br>    <span class="hljs-keyword">return</span> item &gt;= <span class="hljs-number">1</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr2) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="数组-filter-：遍历数组-过滤数组单元值，生成新数组返回"><a href="#数组-filter-：遍历数组-过滤数组单元值，生成新数组返回" class="headerlink" title="数组.filter()：遍历数组(过滤数组单元值，生成新数组返回)"></a>数组.filter()：遍历数组(过滤数组单元值，生成新数组返回)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">25</span>, <span class="hljs-number">48</span>, <span class="hljs-number">2</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr2 = arr1.filter(<span class="hljs-function">(<span class="hljs-params">item, index, arr</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// item: 数组里的每一项</span><br>    <span class="hljs-comment">// index: 数组里的每一项的索引值</span><br>    <span class="hljs-comment">// obj: 数组本身</span><br>    <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">5</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr2) <span class="hljs-comment">// [45, 25, 48, 98]</span><br></code></pre></td></tr></table></figure><h4 id="数组-map-：遍历数组-迭代原数组，生成新数组"><a href="#数组-map-：遍历数组-迭代原数组，生成新数组" class="headerlink" title="数组.map()：遍历数组(迭代原数组，生成新数组)"></a>数组.map()：遍历数组(迭代原数组，生成新数组)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">25</span>, <span class="hljs-number">48</span>, <span class="hljs-number">2</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr2 = arr1.map(<span class="hljs-function">(<span class="hljs-params">item, index, arr</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// item: 数组里的每一项</span><br>    <span class="hljs-comment">// index: 数组里的每一项的索引值</span><br>    <span class="hljs-comment">// obj: 数组本身</span><br>    <span class="hljs-keyword">return</span> item * <span class="hljs-number">5</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr2) <span class="hljs-comment">// [5, 225, 125, 240, 10, 490, 15]</span><br></code></pre></td></tr></table></figure><h4 id="数组-reduce-：遍历数组-累加"><a href="#数组-reduce-：遍历数组-累加" class="headerlink" title="数组.reduce()：遍历数组(累加)"></a>数组.reduce()：遍历数组(累加)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">25</span>, <span class="hljs-number">48</span>, <span class="hljs-number">2</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr2 = arr1.reduce(<span class="hljs-function">(<span class="hljs-params">sum, item</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// sum: 数组中元素的和</span><br>    <span class="hljs-comment">// item: 数组里的每一项</span><br>    sum += item<br>    <span class="hljs-keyword">return</span> sum<br>&#125;, <span class="hljs-number">0</span>)<br><span class="hljs-built_in">console</span>.log(arr2) <span class="hljs-comment">// 222</span><br></code></pre></td></tr></table></figure><h4 id="数组-includes-：查找数组中的元素找到返回-true-找不到返回-false"><a href="#数组-includes-：查找数组中的元素找到返回-true-找不到返回-false" class="headerlink" title="数组.includes()：查找数组中的元素找到返回 true 找不到返回 false"></a>数组.includes()：查找数组中的元素找到返回 true 找不到返回 false</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">25</span>, <span class="hljs-number">48</span>, <span class="hljs-number">2</span>, <span class="hljs-number">98</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr = arr1.includes(<span class="hljs-number">45</span>)<br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="数组-push-：在数组最后面添加元素"><a href="#数组-push-：在数组最后面添加元素" class="headerlink" title="数组.push()：在数组最后面添加元素"></a>数组.push()：在数组最后面添加元素</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>]<br>arr.push(<span class="hljs-string">&#x27;王五&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// [&quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;]</span><br></code></pre></td></tr></table></figure><h4 id="数组-unshift-：在数组头部添加元素"><a href="#数组-unshift-：在数组头部添加元素" class="headerlink" title="数组.unshift()：在数组头部添加元素"></a>数组.unshift()：在数组头部添加元素</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>]<br>arr.unshift(<span class="hljs-string">&#x27;王五&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// [&quot;王五&quot;, &quot;张三&quot;, &quot;李四&quot;]</span><br></code></pre></td></tr></table></figure><h4 id="数组-pop-：删除数组中最后一个元素"><a href="#数组-pop-：删除数组中最后一个元素" class="headerlink" title="数组.pop()：删除数组中最后一个元素"></a>数组.pop()：删除数组中最后一个元素</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;王五&quot;</span>]<br>arr.pop(<span class="hljs-string">&#x27;王五&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// [&quot;张三&quot;, &quot;李四&quot;]</span><br></code></pre></td></tr></table></figure><h4 id="数组-shift-：删除数组头部第一个元素"><a href="#数组-shift-：删除数组头部第一个元素" class="headerlink" title="数组.shift()：删除数组头部第一个元素"></a>数组.shift()：删除数组头部第一个元素</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;王五&quot;</span>]<br>arr.shift(<span class="hljs-string">&#x27;王五&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// [&quot;李四&quot;, &quot;王五&quot;]</span><br></code></pre></td></tr></table></figure><h4 id="数组-splice-：动态删除添加元素"><a href="#数组-splice-：动态删除添加元素" class="headerlink" title="数组.splice()：动态删除添加元素"></a>数组.splice()：动态删除添加元素</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;王五&quot;</span>]<br>arr.splice(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;王五&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// [&quot;王五&quot;, &quot;李四&quot;, &quot;王五&quot;]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划</title>
    <link href="/2021/10/02/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <url>/2021/10/02/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h3 id="动态规划："><a href="#动态规划：" class="headerlink" title="动态规划："></a><strong>动态规划：</strong></h3><blockquote><p>基本思想</p><p>动态规划算法的优缺点和问题分类</p><p>动态规划解决线性、前缀和、区间这三类问题</p></blockquote><h2 id="1-动态规划的简介："><a href="#1-动态规划的简介：" class="headerlink" title="1.动态规划的简介："></a>1.动态规划的简介：</h2><p>​    动态规划（英语：Dynamic programming，简称 DP），通过把原问题分解为相对简单的<strong>子问题</strong>的方式求解<strong>复杂问题</strong>的方法。//定义base case,推导出<strong>状态转移方程</strong></p><p><strong>最优子结构</strong>：最优子结构规定的是子问题与原问题的关系</p><p>​    动态规划要解决的都是一些问题的最优解，即从很多解决问题的方案中找到最优的一个。当我们在求一个问题最优解的时候，如果可以把这个问题分解成多个子问题，然后递归地找到每个子问题的最优解，最后通过一定的数学方法对各个子问题的最优解进行组合得出最终的结果。总结来说就是一个问题的最优解是由它的各个子问题的最优解决定的</p><p><strong>重复子问题</strong>：重复子问题规定的是子问题与子问题的关系。</p><p>​    当我们在递归地寻找每个子问题的最优解的时候，有可能会重复地遇到一些更小的子问题，而且这些子问题会重叠地出现在子问题里，出现这样的情况，会有很多重复的计算，动态规划可以保证每个重叠的子问题只会被求解一次。当重复的问题很多的时候，动态规划可以减少很多重复的计算。重复子问题不是保证解的正确性必须的，但是如果递归求解子问题时，没有出现重复子问题，则没有必要用动态规划，直接普通的递归就可以了。</p><ul><li>动态规划本质是穷举法，可以保证结果是最佳的，复杂度高</li></ul><h2 id="2-利用动态规划解决问题："><a href="#2-利用动态规划解决问题：" class="headerlink" title="2.利用动态规划解决问题："></a>2.利用动态规划解决问题：</h2><ul><li><strong>线性动态规划</strong></li></ul><p>​    状态定义，即dp[n],理解dp[n]是理解问题的关键</p><p>​    状态转移，即dp[n]和dp[n-1]，例如定义好状态 <code>dp[n]</code>，此时子问题是 <code>dp[n-1]</code> 等，并且大规模的问题的解依赖小规模问题的解。</p><ul><li><strong>前缀和</strong></li></ul><p>有两类在数组 a 上的求和需求</p><ol><li>前缀和：求 a[0..i] 的和</li><li>区间和：求区间 a[L, R] 的和</li></ol><p>关键的有两点：</p><p>​    预处理前缀和的过程是最简单且最经典的单串动态规划问题。<br>先将所有位置的前缀和预处理出来，然后再处理区间和的查询，这是一种先缓存中间结果再处理查询的思路，因为这些中间结果在查询时需要反复用到，缓存之后就不用反复计算了，因此花时间预处理这些信息是有效的。</p><ul><li><strong>区间动态规划</strong></li></ul><p>​    区间动态规划，一般是定义 dp[i][j]，表示考虑 [i..j] 范围内的元素，原问题的解增加 i，减小 j 都可以得到更小规模的子问题。推导状态一般是按照区间长度从短到长推的。</p><p>​    最常见的形式：推导 <code>dp[i][j]</code> 时，需要用到 <code>dp[i][j-1], dp[i+1][j], dp[i+1][j-1]</code> 三个子问题</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git常见错误解决方法</title>
    <link href="/2021/09/25/Git%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2021/09/25/Git%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="1-failed-to-receive-handshake-ssl-tls-connection-failed-github-【已解决】"><a href="#1-failed-to-receive-handshake-ssl-tls-connection-failed-github-【已解决】" class="headerlink" title="1.failed to receive handshake ssl/tls connection failed github    【已解决】"></a>1.failed to receive handshake ssl/tls connection failed github    【已解决】</h3><pre><code>在使用github客户端提交代码时，报错`failed to receive handshake ssl/tls connection failed`解决方法：$ git config --global http.sslBackend &quot;openssl&quot;ps:也有可能是网络问题，大概率挂个梯子就好了</code></pre><h3 id="2-在第一次使用git传到远程仓库是报错error-failed-to-push-some-refs-to-‘github-com-xxx-git’-【已解决】"><a href="#2-在第一次使用git传到远程仓库是报错error-failed-to-push-some-refs-to-‘github-com-xxx-git’-【已解决】" class="headerlink" title="2.在第一次使用git传到远程仓库是报错error: failed to push some refs to ‘github.com/xxx.git’    【已解决】"></a>2.在第一次使用git传到远程仓库是报错error: failed to push some refs to ‘github.com/xxx.git’    【已解决】</h3><p>​    经过查资料发现是因为我们在本地新建库后，与远程仓库的内容不一致导致的。为此在我向远程库推送的时候，要先进行pull，让本地新建的库和远程库进行同步。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">正确步骤：<br><span class="hljs-number">1</span>. git init <span class="hljs-regexp">//</span>初始化仓库<br><span class="hljs-number">2</span>. git add .(文件name) <span class="hljs-regexp">//</span>添加文件到本地仓库<br><span class="hljs-number">3</span>. git commit -m “first commit” <span class="hljs-regexp">//</span>添加文件描述信息<br><span class="hljs-number">4</span>. git remote add origin + 远程仓库地址 <span class="hljs-regexp">//</span>链接远程仓库，创建主分支<br><span class="hljs-number">5</span>. git pull origin master <span class="hljs-regexp">//</span> 把本地仓库的变化连接到远程仓库主分支<br><span class="hljs-number">6</span>. git push -u origin master <span class="hljs-regexp">//</span>把本地仓库的文件推送到远程仓库<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
